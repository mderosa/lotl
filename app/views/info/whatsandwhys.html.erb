
<h2>What is the Law of the Loop?</h2>
<p>
  The Law of the Loop says that for a team in a dynamic environment success
  will be proportional to the rate at which they take a course of action, observe
  the results, and then modify the initial action based on those observed results.
  The law holds where despite experience and ability actions will 
  be distributed across a spectrum of good and bad ideas. Therefore the only competitive 
  advantage available to a team is the rate at which it can experimentally discover and 
  execute the better courses of action.
</p>
<h2>What is the motivation for LOTL?</h2>
<p>
  The motivation for LOTL is to develop a management tool for software teams practicing continuous 
  deployment. For these teams is it necessary to release software in a way that is in control both
  rate and quality wise. This tool is intended to provide those teams with a mathematically 
  sound way of observing their rate and quality as they loop through deployments and assist those teams 
  in improving over time. Of course, the tool should be useful for other teams as well.
</p>
<h2>Why should I use LOTL?</h2>
<p>
  Teams that learn to loop faster in the process have to learn to do things more
  efficiently and more capably on a large number of fronts. Each of those small improvements
  by themselves may not amount to much but combined together small improvements compound 
  geometrically, over time, resulting in dramatic improvements in team capability. 
</p>
<h2>How do I use LOTL</h2>
<p>Start at the task list page by putting tasks in 'Proposed' section.  To start it's fine to just get a list of
  sketchy, basic tasks in this section. Some of these tasks wont ever get worked on.  There will be more
  important things that come up.  Some of the tasks however will be important enough to start work on.
  As soon as anyone starts serious work on a task it should be moved into the 'Work in Progress' list.
  For software development, as an example, as soon as someone starts to fill out a tasks specification in
  detail enough for implementation, the task should be moved.  While the work is in progress one person, but
  probably several people will work on aspects of the task.  When the task is done and delivered, and the
  delivery is the important part here, the task can be moved into the 'Delivered to User' list.  Again,
  to use software development as an example, the task is coded and tested as a work in progress. But
  the task is not moved until the functionality of that task is delivered to a live production site.
  If a problem, like a bug, occurs after delivery, implying that the task was not finished properly, 
  then the task should be moved back into the 'Work in Progress' list until it is finished and delivered.
</p>

