
<h2><%= t ".what-is-the-law-of-the-loop" %></h2>
<p>
  Any activity that involves discovery involves a continuous looping from experiments,
  to observation of results, to further experiments. The best teams don't have better 
  ideas rather they discover the best ideas faster by looping faster. This is the Law
  of the Loop.
</p>
<h2><%= t ".what-is-the-motivation-for-lotl" %></h2>
<p>
  LOOP is an attempt to develop a productivity tool for software teams practicing continuous 
  deployment. For these teams is it necessary to release software at a controlled
  rate and with a controlled quality. This tool provides teams with a mathematically 
  sound way of observing their rate and quality as they loop through deployments. It also assists teams 
  to improve rate and quality over time. Of course, the tool should be useful for other teams as well.
</p>
<h2><%= t ".why-should-i-use-lotl" %></h2>
<p>
  Teams that learn to loop faster are learning to execute more
  efficiently and more capably on a large number of fronts. Each of those small improvements
  by themselves may not amount to much but combined together small improvements compound 
  geometrically over time, resulting in dramatic improvements in team capability. 
</p>
<h2><%= t ".how-do-i-use-lotl" %></h2>
<p>Start at the task list page by putting tasks in the 'Proposed' section.  To start it's fine to just get a list of
  sketchy, basic tasks in this section. Some of these tasks wont ever get worked on.  There will be more
  important things that come up.  Some of the tasks however will be important enough to start work on.
  As soon as anyone starts serious work on a task it should be moved into the 'Work in Progress' list.
  For software development, as an example, as soon as someone starts to fill out a task specification in
  enough detail for implementation, the task should be moved.  While the work is in progress one person, but
  probably several people will work on aspects of the task.  When the task is done and delivered, and the
  delivery is the important part here, the task can be moved into the 'Delivered to User' list.  Again,
  to use software development as an example, the task is coded and tested as a work in progress. But
  the task is not moved until the functionality of that task is delivered to a live production site.
  If a problem, like a bug, occurs after delivery, implying that the task was not finished properly, 
  then the task should be moved back into the 'Work in Progress' list until it is finished and delivered.
</p>

<%# error: forgot closing erb tag while adding localization %>
